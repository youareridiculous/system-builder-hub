"""
Sections codegen generator for Co-Builder.

Generates React components for each section in the Spec and creates the main page.
"""

import json
from pathlib import Path
from typing import Dict, Any, List


def generate_site_components(build_id: str, workspace: str, spec: Dict[str, Any]) -> Dict[str, Any]:
    """Generate site components driven by spec JSON"""
    return {"success": True, "path": "site_components", "sha256": "site_components_generated"}


def generate_sections_codegen(build_id: str, workspace: str, spec: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate section components and main page from the Spec.
    
    Args:
        build_id: The build ID for this workspace
        workspace: The workspace root path
        spec: The parsed specification
        
    Returns:
        Dict with success status and metadata
    """
    try:
        build_path = Path(workspace) / build_id
        
        # Generate individual section components
        sections_dir = build_path / "apps/site/components/sections"
        sections_dir.mkdir(parents=True, exist_ok=True)
        created_files = []
        
        # Extract sections from spec with robust error handling
        sections = spec.get("sections", [])
        if not sections or not isinstance(sections, list):
            # Default sections if none specified
            sections = [
                {"type": "hero", "title": "Welcome to Our Platform", "subtitle": "Build amazing things with our tools"},
                {"type": "feature-grid", "title": "Features", "features": [{"title": "Feature 1", "description": "Description 1"}]},
                {"type": "logo-cloud", "title": "Trusted by", "logos": ["Company 1", "Company 2", "Company 3"]},
                {"type": "showreel", "title": "See It In Action", "description": "Watch our demo"},
                {"type": "pricing", "title": "Simple Pricing", "tiers": [{"name": "Basic", "price": "$9/month"}]},
                {"type": "cta-banner", "title": "Ready to Get Started?", "button": "Start Free Trial"}
            ]
        
        # Validate and normalize sections
        validated_sections = []
        for i, section in enumerate(sections):
            if not isinstance(section, dict):
                raise ValueError(f"Section {i} is not a valid object")
            
            if 'type' not in section:
                raise ValueError(f"Section {i} missing required 'type' field")
            
            # Normalize section data
            normalized_section = _normalize_section_data(section)
            validated_sections.append(normalized_section)
        
        # Generate section components
        for section in validated_sections:
            try:
                section_file = sections_dir / f"{section['type'].title().replace('-', '')}.tsx"
                section_content = _generate_section_component(section)
                section_file.write_text(section_content)
                created_files.append(str(section_file))
            except Exception as e:
                raise ValueError(f"Failed to generate section '{section.get('type', 'unknown')}': {e}")
        
        # Generate main page
        page_file = build_path / "apps/site/app/page.tsx"
        page_file.parent.mkdir(parents=True, exist_ok=True)
        page_content = _generate_main_page(validated_sections)
        page_file.write_text(page_content)
        created_files.append(str(page_file))
        
        # Generate layout
        layout_file = build_path / "apps/site/app/layout.tsx"
        layout_content = _generate_layout()
        layout_file.write_text(layout_content)
        created_files.append(str(layout_file))
        
        return {
            "success": True,
            "path": str(page_file),
            "is_directory": False,
            "lines_changed": sum(len(content.splitlines()) for content in [page_content, layout_content]),
            "sha256": "",  # Will be computed by file_ops
            "created_files": created_files
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "path": "",
            "is_directory": False,
            "lines_changed": 0,
            "sha256": ""
        }


def _generate_section_templates() -> str:
    """Generate the section templates file."""
    return '''// Section templates generated by Co-Builder
import React from 'react'

export interface SectionProps {
  id?: string
  className?: string
}

export interface HeroSectionProps extends SectionProps {
  title: string
  subtitle: string
  cta?: {
    text: string
    href: string
  }
}

export interface FeatureGridSectionProps extends SectionProps {
  title: string
  subtitle?: string
  features: Array<{
    title: string
    description: string
    icon?: string
  }>
}

export interface LogoCloudSectionProps extends SectionProps {
  title: string
  logos: string[]
}

export interface ShowreelSectionProps extends SectionProps {
  title: string
  description: string
  videoUrl?: string
  imageUrl?: string
}

export interface PricingSectionProps extends SectionProps {
  title: string
  subtitle?: string
  plans: Array<{
    name: string
    price: string
    description?: string
    features?: string[]
    cta?: string
  }>
}

export interface CtaBannerSectionProps extends SectionProps {
  title: string
  subtitle?: string
  button: string
  buttonHref?: string
}

// Template functions
export const renderHero = (props: HeroSectionProps) => {
  const { title, subtitle, cta, className = '' } = props
  return (
    <section className={`py-20 px-4 text-center ${className}`}>
      <div className="max-w-4xl mx-auto">
        <h1 className="text-5xl font-bold text-gray-900 mb-6">{title}</h1>
        <p className="text-xl text-gray-600 mb-8">{subtitle}</p>
        {cta && (
          <a
            href={cta.href}
            className="btn btn-primary text-lg px-8 py-3"
          >
            {cta.text}
          </a>
        )}
      </div>
    </section>
  )
}

export const renderFeatureGrid = (props: FeatureGridSectionProps) => {
  const { title, subtitle, features, className = '' } = props
  return (
    <section className={`py-20 px-4 ${className}`}>
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">{title}</h2>
          {subtitle && <p className="text-xl text-gray-600">{subtitle}</p>}
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <div key={index} className="text-center">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">{feature.title}</h3>
              <p className="text-gray-600">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}

export const renderLogoCloud = (props: LogoCloudSectionProps) => {
  const { title, logos, className = '' } = props
  return (
    <section className={`py-16 px-4 bg-gray-50 ${className}`}>
      <div className="max-w-6xl mx-auto">
        <h2 className="text-2xl font-semibold text-gray-900 text-center mb-12">{title}</h2>
        <div className="flex flex-wrap justify-center items-center gap-8 opacity-60">
          {logos.map((logo, index) => (
            <div key={index} className="text-lg font-medium text-gray-500">
              {logo}
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}

export const renderShowreel = (props: ShowreelSectionProps) => {
  const { title, description, videoUrl, imageUrl, className = '' } = props
  return (
    <section className={`py-20 px-4 ${className}`}>
      <div className="max-w-4xl mx-auto text-center">
        <h2 className="text-4xl font-bold text-gray-900 mb-4">{title}</h2>
        <p className="text-xl text-gray-600 mb-12">{description}</p>
        <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">
          {videoUrl ? (
            <video controls className="w-full h-full rounded-lg">
              <source src={videoUrl} type="video/mp4" />
            </video>
          ) : (
            <div className="text-gray-500 text-lg">Demo Video Placeholder</div>
          )}
        </div>
      </div>
    </section>
  )
}

export const renderPricing = (props: PricingSectionProps) => {
  const { title, subtitle, plans, className = '' } = props
  return (
    <section className={`py-20 px-4 ${className}`}>
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">{title}</h2>
          {subtitle && <p className="text-xl text-gray-600">{subtitle}</p>}
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {plans.map((plan, index) => (
            <div key={index} className="bg-white border border-gray-200 rounded-lg p-8 text-center">
              <h3 className="text-2xl font-bold text-gray-900 mb-2">{plan.name}</h3>
              <div className="text-4xl font-bold text-primary-600 mb-4">{plan.price}</div>
              {plan.description && <p className="text-gray-600 mb-6">{plan.description}</p>}
              {plan.features && (
                <ul className="text-left mb-8 space-y-2">
                  {plan.features.map((feature, idx) => (
                    <li key={idx} className="flex items-center">
                      <span className="text-primary-600 mr-2">âœ“</span>
                      {feature}
                    </li>
                  ))}
                </ul>
              )}
              {plan.cta && (
                <button className="btn btn-primary w-full">{plan.cta}</button>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}

export const renderCtaBanner = (props: CtaBannerSectionProps) => {
  const { title, subtitle, button, buttonHref = '#', className = '' } = props
  return (
    <section className={`py-20 px-4 bg-primary-600 ${className}`}>
      <div className="max-w-4xl mx-auto text-center">
        <h2 className="text-4xl font-bold text-white mb-4">{title}</h2>
        {subtitle && <p className="text-xl text-primary-100 mb-8">{subtitle}</p>}
        <a
          href={buttonHref}
          className="btn bg-white text-primary-600 hover:bg-gray-100 text-lg px-8 py-3"
        >
          {button}
        </a>
      </div>
    </section>
  )
}
'''


def _generate_section_component(section: Dict[str, Any]) -> str:
    """Generate a React component for a specific section."""
    section_type = section['type']
    title = section_type.title().replace('-', '')
    
    if section_type == 'hero':
        return f'''import React from 'react'

interface Props {{
  title?: string
  subtitle?: string
  cta?: {{
    text: string
    href: string
  }}
}}

export default function {title}({{ title, subtitle, cta }}: Props) {{
  return (
    <section className="py-20 px-4 text-center">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-5xl font-bold text-gray-900 mb-6">{{title}}</h1>
        <p className="text-xl text-gray-600 mb-8">{{subtitle}}</p>
        {{cta && (
          <a
            href={{cta.href}}
            className="inline-flex items-center justify-center rounded-lg px-8 py-3 text-lg font-medium bg-blue-600 text-white hover:bg-blue-700 transition-colors"
          >
            {{cta.text}}
          </a>
        )}}
      </div>
    </section>
  )
}}
'''
    
    elif section_type == 'feature-grid':
        return f'''import React from 'react'

interface Props {{
  title?: string
  subtitle?: string
  features?: Array<{{
    title: string
    description: string
  }}>
}}

export default function {title}({{ title, subtitle, features }}: Props) {{
  return (
    <section className="py-20 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">{{title}}</h2>
          {{subtitle && <p className="text-xl text-gray-600">{{subtitle}}</p>}}
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {{features?.map((feature, index) => (
            <div key={{index}} className="text-center">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">{{feature.title}}</h3>
              <p className="text-gray-600">{{feature.description}}</p>
            </div>
          ))}}
        </div>
      </div>
    </section>
  )
}}
'''
    
    elif section_type == 'logo-cloud':
        return f'''import React from 'react'

interface Props {{
  title?: string
  logos?: string[]
}}

export default function {title}({{ title, logos }}: Props) {{
  return (
    <section className="py-16 px-4 bg-gray-50">
      <div className="max-w-6xl mx-auto">
        <h2 className="text-2xl font-semibold text-gray-900 text-center mb-12">{{title}}</h2>
        <div className="flex flex-wrap justify-center items-center gap-8 opacity-60">
          {{logos?.map((logo, index) => (
            <div key={{index}} className="text-lg font-medium text-gray-500">
              {{logo}}
            </div>
          ))}}
        </div>
      </div>
    </section>
  )
}}
'''
    
    elif section_type == 'showreel':
        return f'''import React from 'react'

interface Props {{
  title?: string
  description?: string
}}

export default function {title}({{ title, description }}: Props) {{
  return (
    <section className="py-20 px-4">
      <div className="max-w-4xl mx-auto text-center">
        <h2 className="text-4xl font-bold text-gray-900 mb-4">{{title}}</h2>
        <p className="text-xl text-gray-600 mb-12">{{description}}</p>
        <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">
          <div className="text-gray-500 text-lg">Demo Video Placeholder</div>
        </div>
      </div>
    </section>
  )
}}
'''
    
    elif section_type == 'pricing':
        return f'''import React from 'react'

interface Props {{
  title?: string
  subtitle?: string
  plans?: Array<{{
    name: string
    price: string
    description?: string
    features?: string[]
    cta?: string
  }}>
}}

export default function {title}({{ title, subtitle, plans }}: Props) {{
  return (
    <section className="py-20 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">{{title}}</h2>
          {{subtitle && <p className="text-xl text-gray-600">{{subtitle}}</p>}}
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {{plans?.map((plan, index) => (
            <div key={{index}} className="bg-white border border-gray-200 rounded-lg p-8 text-center">
              <h3 className="text-2xl font-bold text-gray-900 mb-2">{{plan.name}}</h3>
              <div className="text-4xl font-bold text-blue-600 mb-4">{{plan.price}}</div>
              {{plan.description && <p className="text-gray-600 mb-6">{{plan.description}}</p>}}
              {{plan.features && (
                <ul className="text-left mb-8 space-y-2">
                  {{plan.features.map((feature, idx) => (
                    <li key={{idx}} className="flex items-center">
                      <span className="text-blue-600 mr-2">âœ“</span>
                      {{feature}}
                    </li>
                  ))}}
                </ul>
              )}}
              {{plan.cta && (
                <button className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
                  {{plan.cta}}
                </button>
              )}}
            </div>
          ))}}
        </div>
      </div>
    </section>
  )
}}
'''
    
    elif section_type == 'cta-banner':
        return f'''import React from 'react'

interface Props {{
  title?: string
  subtitle?: string
  button?: string
  buttonHref?: string
}}

export default function {title}({{ title, subtitle, button, buttonHref }}: Props) {{
  return (
    <section className="py-20 px-4 bg-blue-600">
      <div className="max-w-4xl mx-auto text-center">
        <h2 className="text-4xl font-bold text-white mb-4">{{title}}</h2>
        {{subtitle && <p className="text-xl text-blue-100 mb-8">{{subtitle}}</p>}}
        <a
          href={{buttonHref || '#'}}
          className="inline-flex items-center justify-center rounded-lg px-8 py-3 text-lg font-medium bg-white text-blue-600 hover:bg-gray-100 transition-colors"
        >
          {{button}}
        </a>
      </div>
    </section>
  )
}}
'''
    
    else:
        # Generic section
        return '''import React from 'react'

interface Props {
  title?: string
  children?: React.ReactNode
  className?: string
}

export default function {title}({{ title, children, className = '' }}: Props) {{
  return (
    <section className="py-20 px-4">
      <div className="max-w-6xl mx-auto">
        {{title && <h2 className="text-4xl font-bold text-gray-900 mb-8 text-center">{{title}}</h2>}}
        {{children}}
      </div>
    </section>
  )
}}
'''.format(title=title)


def _generate_main_page(sections: List[Dict[str, Any]]) -> str:
    """Generate the main page that imports and renders all sections."""
    
    imports = []
    components = []
    
    for section in sections:
        section_type = section['type']
        title = section_type.title().replace('-', '')
        imports.append(f"import {title} from './components/sections/{title}'")
        
        # Convert section data to props
        props = []
        for key, value in section.items():
            if key != 'type':
                if isinstance(value, str):
                    props.append(f'{key}="{value}"')
                else:
                    props.append(f'{key}={{{json.dumps(value)}}}')
        
        props_str = ' '.join(props)
        components.append(f'      <{title} {props_str} />')
    
    return f'''import React from 'react'
{chr(10).join(imports)}

export default function Page() {{
  return (
    <main>
{chr(10).join(components)}
    </main>
  )
}}
'''


def _generate_layout() -> str:
    """Generate the root layout component."""
    return '''import type { Metadata } from 'next'
import './globals.css'

export const metadata: Metadata = {
  title: 'AI Website Builder',
  description: 'Generated by Co-Builder',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
'''


def _normalize_section_data(section: Dict[str, Any]) -> Dict[str, Any]:
    """Normalize section data to ensure it has required fields and proper structure"""
    if not isinstance(section, dict):
        return {"type": "hero", "title": "Welcome"}
    
    section_type = section.get("type", "hero")
    normalized = {"type": section_type}
    
    # Map common field names and provide defaults
    if section_type == "hero":
        normalized["title"] = section.get("title", section.get("headline", "Welcome to Our Platform"))
        normalized["subtitle"] = section.get("subtitle", section.get("sub", "Build amazing things with our tools"))
        normalized["cta"] = section.get("cta", {"text": "Get Started", "href": "/signup"})
        if "motionEnergy" in section:
            normalized["motionEnergy"] = section["motionEnergy"]
            
    elif section_type == "feature-grid":
        normalized["title"] = section.get("title", "Features")
        normalized["features"] = section.get("features", section.get("items", [
            {"title": "Feature 1", "description": "Description 1"},
            {"title": "Feature 2", "description": "Description 2"},
            {"title": "Feature 3", "description": "Description 3"}
        ]))
        
    elif section_type == "logo-cloud":
        normalized["title"] = section.get("title", "Trusted by")
        normalized["logos"] = section.get("logos", ["Company 1", "Company 2", "Company 3"])
        
    elif section_type == "showreel":
        normalized["title"] = section.get("title", "See It In Action")
        normalized["description"] = section.get("description", "Watch our demo")
        if "source" in section:
            normalized["source"] = section["source"]
            
    elif section_type == "pricing":
        normalized["title"] = section.get("title", "Simple Pricing")
        normalized["tiers"] = section.get("tiers", section.get("plans", [
            {"name": "Basic", "price": "$9/month", "features": ["Feature 1", "Feature 2"]},
            {"name": "Pro", "price": "$29/month", "features": ["All Basic", "Feature 3", "Feature 4"]}
        ]))
        
    elif section_type == "cta-banner":
        normalized["title"] = section.get("title", "Ready to Get Started?")
        normalized["button"] = section.get("button", "Start Free Trial")
        
    else:
        # Unknown section type, provide basic defaults
        normalized["title"] = section.get("title", f"{section_type.title()} Section")
    
    return normalized
