"""
Tokens and Tailwind CSS generator for Co-Builder.

Generates design tokens and Tailwind configuration from the Spec.
"""

import json
from pathlib import Path
from typing import Dict, Any


def generate_tokens_tailwind(build_id: str, workspace: str, spec: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate design tokens and Tailwind configuration from the Spec.
    
    Args:
        build_id: The build ID for this workspace
        workspace: The workspace root path
        spec: The parsed specification
        
    Returns:
        Dict with success status and metadata
    """
    try:
        build_path = Path(workspace) / build_id
        
        # Extract design tokens from spec
        tokens = _extract_tokens_from_spec(spec)
        
        # Generate tokens file
        tokens_file = build_path / "packages/core/src/tokens.ts"
        tokens_content = _generate_tokens_content(tokens)
        tokens_file.write_text(tokens_content)
        
        # Generate Tailwind config
        tailwind_config = build_path / "apps/site/tailwind.config.ts"
        tailwind_content = _generate_tailwind_config(tokens)
        tailwind_config.write_text(tailwind_content)
        
        # Generate globals.css
        globals_css = build_path / "apps/site/app/globals.css"
        globals_content = _generate_globals_css(tokens)
        globals_css.write_text(globals_content)
        
        return {
            "success": True,
            "path": str(tokens_file),
            "is_directory": False,
            "lines_changed": len(tokens_content.splitlines()) + len(tailwind_content.splitlines()) + len(globals_content.splitlines()),
            "sha256": "",  # Will be computed by file_ops
            "created_files": [str(tokens_file), str(tailwind_config), str(globals_css)]
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "path": "",
            "is_directory": False,
            "lines_changed": 0,
            "sha256": ""
        }


def _extract_tokens_from_spec(spec: Dict[str, Any]) -> Dict[str, Any]:
    """Extract design tokens from the specification."""
    
    # Default tokens if not specified in spec
    default_tokens = {
        "colors": {
            "primary": {
                "50": "#f0f9ff",
                "100": "#e0f2fe", 
                "200": "#bae6fd",
                "300": "#7dd3fc",
                "400": "#38bdf8",
                "500": "#0ea5e9",
                "600": "#0284c7",
                "700": "#0369a1",
                "800": "#075985",
                "900": "#0c4a6e"
            },
            "gray": {
                "50": "#f9fafb",
                "100": "#f3f4f6",
                "200": "#e5e7eb",
                "300": "#d1d5db",
                "400": "#9ca3af",
                "500": "#6b7280",
                "600": "#4b5563",
                "700": "#374151",
                "800": "#1f2937",
                "900": "#111827"
            }
        },
        "spacing": {
            "xs": "0.5rem",
            "sm": "0.75rem",
            "md": "1rem",
            "lg": "1.5rem",
            "xl": "2rem",
            "2xl": "3rem",
            "3xl": "4rem"
        },
        "typography": {
            "fontFamily": {
                "sans": ["Inter", "system-ui", "sans-serif"],
                "mono": ["JetBrains Mono", "monospace"]
            },
            "fontSize": {
                "xs": "0.75rem",
                "sm": "0.875rem",
                "base": "1rem",
                "lg": "1.125rem",
                "xl": "1.25rem",
                "2xl": "1.5rem",
                "3xl": "1.875rem",
                "4xl": "2.25rem",
                "5xl": "3rem"
            }
        },
        "borderRadius": {
            "sm": "0.125rem",
            "md": "0.375rem",
            "lg": "0.5rem",
            "xl": "0.75rem",
            "2xl": "1rem"
        }
    }
    
    # Override with spec values if present
    if "design" in spec and "tokens" in spec["design"]:
        spec_tokens = spec["design"]["tokens"]
        for category, values in spec_tokens.items():
            if category in default_tokens:
                default_tokens[category].update(values)
    
    return default_tokens


def _generate_tokens_content(tokens: Dict[str, Any]) -> str:
    """Generate the tokens TypeScript file content."""
    return f"""// Design tokens generated by Co-Builder
export const tokens = {json.dumps(tokens, indent=2)} as const

export type ColorScale = keyof typeof tokens.colors.primary
export type SpacingScale = keyof typeof tokens.spacing
export type FontSizeScale = keyof typeof tokens.typography.fontSize
export type BorderRadiusScale = keyof typeof tokens.borderRadius

// Utility functions
export const getColor = (color: string, scale: ColorScale = '500') => {{
  const colorObj = tokens.colors[color as keyof typeof tokens.colors]
  return colorObj?.[scale] || colorObj?.['500'] || color
}}

export const getSpacing = (scale: SpacingScale) => tokens.spacing[scale]
export const getFontSize = (scale: FontSizeScale) => tokens.typography.fontSize[scale]
export const getBorderRadius = (scale: BorderRadiusScale) => tokens.borderRadius[scale]
"""


def _generate_tailwind_config(tokens: Dict[str, Any]) -> str:
    """Generate the Tailwind configuration file."""
    return f"""import type {{ Config }} from 'tailwindcss'
import {{ tokens }} from '@core/tokens'

const config: Config = {{
  content: [
    './pages/**/*.{{js,ts,jsx,tsx,mdx}}',
    './components/**/*.{{js,ts,jsx,tsx,mdx}}',
    './app/**/*.{{js,ts,jsx,tsx,mdx}}',
  ],
  theme: {{
    extend: {{
      colors: {json.dumps(tokens['colors'], indent=8)},
      spacing: {json.dumps(tokens['spacing'], indent=8)},
      fontFamily: {json.dumps(tokens['typography']['fontFamily'], indent=8)},
      fontSize: {json.dumps(tokens['typography']['fontSize'], indent=8)},
      borderRadius: {json.dumps(tokens['borderRadius'], indent=8)},
    }},
  }},
  plugins: [],
}}
export default config
"""


def _generate_globals_css(tokens: Dict[str, Any]) -> str:
    """Generate the global CSS file."""
    return f"""@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap');

@layer base {{
  html {{
    font-family: {tokens['typography']['fontFamily']['sans'][0]}, system-ui, sans-serif;
  }}
  
  body {{
    @apply bg-white text-gray-900 antialiased;
  }}
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {{
    *,
    *::before,
    *::after {{
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }}
  }}
}}

@layer components {{
  .btn {{
    @apply inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
  }}
  
  .btn-primary {{
    @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }}
  
  .btn-secondary {{
    @apply bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500;
  }}
  
  .input {{
    @apply block w-full rounded-lg border border-gray-300 px-3 py-2 text-sm placeholder-gray-400 focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500;
  }}
}}

@layer utilities {{
  .text-balance {{
    text-wrap: balance;
  }}
}}
"""
