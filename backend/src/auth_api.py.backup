"""
Auth API - Authentication and authorization endpoints
"""
import logging
import logging
try:
    import jwt
except ImportError:
    jwt = None
    logging.warning("PyJWT not available - authentication will be disabled")
import datetime
from functools import wraps
from typing import Dict, Any, Optional
from flask import Blueprint, request, jsonify, current_app
from werkzeug.security import generate_password_hash, check_password_hash
from db import get_db, create_user, authenticate_user, get_user_by_id, get_user_by_email, list_users, ensure_users_table

logger = logging.getLogger(__name__)

bp = Blueprint("auth", __name__, url_prefix="/api/auth")

def generate_jwt_token(user_id: int, email: str, role: str) -> str:
    """Generate JWT token for user"""
    if jwt is None:
        raise RuntimeError("PyJWT not available - cannot generate tokens")
    
    payload = {
        "user_id": user_id,
        "email": email,
        "role": role,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=24)
    }
    return jwt.encode(payload, current_app.config["AUTH_SECRET_KEY"], algorithm="HS256")
    """Generate JWT token for user"""
    payload = {
        'user_id': user_id,
        'email': email,
        'role': role,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24),
        'iat': datetime.datetime.utcnow()
    }
    
    # Add tenant claim if in tenant context
    try:
        from tenancy.context import get_current_tenant_id
        tenant_id = get_current_tenant_id()
        if tenant_id:
            payload['ten'] = str(tenant_id)
    except ImportError:
        pass  # Tenancy not available
    secret_key = current_app.config.get('AUTH_SECRET_KEY', 'default-secret-key')
    return jwt.encode(payload, secret_key, algorithm='HS256')

def verify_jwt_token(token: str) -> Optional[Dict[str, Any]]:
    """Verify JWT token and return payload"""
    try:
        secret_key = current_app.config.get('AUTH_SECRET_KEY', 'default-secret-key')
        payload = jwt.decode(token, secret_key, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("JWT token expired")
        return None
    except jwt.InvalidTokenError:
        logger.warning("Invalid JWT token")
        return None

def get_current_user():
    """Get current user from request"""
    auth_header = request.headers.get('Authorization')
    if not auth_header:
        return None
    
    try:
        # Handle "Bearer <token>" format
        if auth_header.startswith('Bearer '):
            token = auth_header[7:]
        else:
            token = auth_header
        
        payload = verify_jwt_token(token)
        if not payload:
            return None
        
        # Get user from database
        db = get_db(current_app.config.get('DATABASE', 'instance/app.db'))
        user = get_user_by_id(db, payload['user_id'])
        return user
    except Exception as e:
        logger.error(f"Error getting current user: {e}")
        return None

def require_auth(role: Optional[str] = None):
    """Decorator to require authentication and optionally specific role"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            user = get_current_user()
            if not user:
                return jsonify({'error': 'Authentication required'}), 401
            
            if role and user.get('role') != role:
                return jsonify({'error': f'Role {role} required'}), 403
            
            # Add user to request context
            request.current_user = user
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def migrate_subscription_columns(db):
    """Add subscription columns to users table if they don't exist"""
    try:
        cursor = db.cursor()
        
        # Check if columns exist
        cursor.execute("PRAGMA table_info(users)")
        columns = [col[1] for col in cursor.fetchall()]
        
        # Add subscription columns if they don't exist
        if 'subscription_plan' not in columns:
            logger.info("Adding subscription_plan column")
            cursor.execute("ALTER TABLE users ADD COLUMN subscription_plan TEXT DEFAULT 'free'")
        
        if 'subscription_status' not in columns:
            logger.info("Adding subscription_status column")
            cursor.execute("ALTER TABLE users ADD COLUMN subscription_status TEXT DEFAULT 'trial'")
        
        if 'trial_end' not in columns:
            logger.info("Adding trial_end column")
            cursor.execute("ALTER TABLE users ADD COLUMN trial_end TEXT")
        
        db.commit()
        
    except Exception as e:
        logger.error(f"Migration failed: {e}")
        raise

@bp.route("/register", methods=["POST"])
def register():
    """Register a new user"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Invalid JSON'}), 400
        
        email = data.get('email', '').strip()
        password = data.get('password', '')
        role = data.get('role', 'user')
        
        # Validate input
        if not email or not password:
            return jsonify({'error': 'Email and password are required'}), 400
        
        if len(password) < 6:
            return jsonify({'error': 'Password must be at least 6 characters'}), 400
        
        # Create user
        db = get_db(current_app.config.get('DATABASE', 'instance/app.db'))
        ensure_users_table(db)
        
        # Run migration to add subscription columns
        migrate_subscription_columns(db)
        
        try:
            user_id = create_user(db, email, password, role)
            user = get_user_by_id(db, user_id)
            
            # Audit the registration
            try:
                from obs.audit import audit_auth_event
                audit_auth_event('register', user_id, {
                    'email': email,
                    'role': role
                })
            except ImportError:
                pass  # Audit not available
            
            # Generate JWT token
            token = generate_jwt_token(user['id'], user['email'], user['role'])
            
            # Track analytics event
            try:
                from src.analytics.service import AnalyticsService
                analytics = AnalyticsService()
                analytics.track(
                    tenant_id=str(g.tenant_id) if hasattr(g, 'tenant_id') else None,
                    event='auth.user.registered',
                    user_id=user['id'],
                    source='app',
                    props={'email': email, 'role': role}
                )
            except ImportError:
                pass  # Analytics not available
            
            return jsonify({
                'success': True,
                'user': {
                    'id': user['id'],
                    'email': user['email'],
                    'role': user['role']
                },
                'token': token
            }), 201
            
        except ValueError as e:
            return jsonify({'error': str(e)}), 400
            
    except Exception as e:
        logger.error(f"Registration error: {e}")
        return jsonify({'error': 'Registration failed'}), 500

@bp.route("/login", methods=["POST"])
def login():
    """Login user and return JWT token"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Invalid JSON'}), 400
        
        email = data.get('email', '').strip()
        password = data.get('password', '')
        
        # Validate input
        if not email or not password:
            return jsonify({'error': 'Email and password are required'}), 400
        
        # Authenticate user
        db = get_db(current_app.config.get('DATABASE', 'instance/app.db'))
        ensure_users_table(db)
        
        # Run migration to add subscription columns
        migrate_subscription_columns(db)
        
        user = authenticate_user(db, email, password)
        if not user:
            return jsonify({'error': 'Invalid email or password'}), 401
        
        # Audit the login
        try:
            from obs.audit import audit_auth_event
            audit_auth_event('login', user['id'], {
                'email': email
            })
        except ImportError:
            pass  # Audit not available
        
        # Generate JWT token
        token = generate_jwt_token(user['id'], user['email'], user['role'])
        
        # Track analytics event
        try:
            from src.analytics.service import AnalyticsService
            analytics = AnalyticsService()
            analytics.track(
                tenant_id=str(g.tenant_id) if hasattr(g, 'tenant_id') else None,
                event='auth.user.login',
                user_id=user['id'],
                source='app',
                props={'email': email}
            )
        except ImportError:
            pass  # Analytics not available
        
        return jsonify({
            'success': True,
            'user': {
                'id': user['id'],
                'email': user['email'],
                'role': user['role']
            },
            'token': token
        }), 200
        
    except Exception as e:
        logger.error(f"Login error: {e}")
        return jsonify({'error': 'Login failed'}), 500

@bp.route("/me", methods=["GET"])
@require_auth()
def me():
    """Get current user information"""
    try:
        user = request.current_user
        return jsonify({
            'success': True,
            'user': {
                'id': user['id'],
                'email': user['email'],
                'role': user['role'],
                'created_at': user['created_at']
            }
        }), 200
        
    except Exception as e:
        logger.error(f"Me endpoint error: {e}")
        return jsonify({'error': 'Failed to get user info'}), 500

@bp.route("/users", methods=["GET"])
@require_auth("admin")
def list_users_endpoint():
    """List all users (admin only)"""
    try:
        db = get_db(current_app.config.get('DATABASE', 'instance/app.db'))
        users = list_users(db)
        
        return jsonify({
            'success': True,
            'users': users
        }), 200
        
    except Exception as e:
        logger.error(f"List users error: {e}")
        return jsonify({'error': 'Failed to list users'}), 500

@bp.route("/logout", methods=["POST"])
@require_auth()
def logout():
    """Logout user (client should discard token)"""
    return jsonify({
        'success': True,
        'message': 'Logged out successfully'
    }), 200
