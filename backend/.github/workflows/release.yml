name: Release Candidate Build

on:
  push:
    tags:
      - 'v*-rc*'

env:
  PYTHON_VERSION: '3.10'
  DOCKER_IMAGE: system-builder-hub

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
      
      - name: Run linting
        run: |
          flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
          black --check src/ tests/
          isort --check-only src/ tests/
          mypy src/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock
      
      - name: Run unit and integration tests
        run: |
          python -m pytest tests/meta_builder_v3/ -v --tb=short
          python -m pytest tests/ -k "not smoke" -v --tb=short
      
      - name: Run smoke tests (optional)
        if: env.RUN_SMOKE == 'true' || env.SMOKE_BASE_URL != ''
        run: |
          python -m pytest tests/smoke/ -v --tb=short
        env:
          RUN_SMOKE: ${{ vars.RUN_SMOKE }}
          SMOKE_BASE_URL: ${{ vars.SMOKE_BASE_URL }}

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.version.outputs.version }}
          path: /tmp/docker-image.tar
          retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release Candidate ${{ steps.version.outputs.version }}
          body: |
            ## Release Candidate ${{ steps.version.outputs.version }}
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Testing
            - [x] Unit tests passed
            - [x] Integration tests passed
            - [ ] Smoke tests (run manually if needed)
            
            ### Next Steps
            1. Deploy to staging environment
            2. Run smoke tests
            3. Verify functionality
            4. Promote to GA if ready
          draft: true
          prerelease: true
