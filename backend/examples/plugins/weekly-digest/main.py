"""
Weekly Digest Plugin
Generates and sends weekly digest reports with CRM insights and analytics
"""
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

def get_weekly_stats(ctx) -> Dict[str, Any]:
    """Get weekly statistics for the digest"""
    try:
        # Calculate date range for the past week
        end_date = datetime.utcnow().date()
        start_date = end_date - timedelta(days=7)
        
        # Get contacts stats
        contacts_stats = ctx.db.query("""
            SELECT 
                COUNT(*) as total_contacts,
                COUNT(CASE WHEN created_at >= %s THEN 1 END) as new_contacts,
                COUNT(CASE WHEN lead_score >= 75 THEN 1 END) as qualified_leads
            FROM contacts 
            WHERE tenant_id = %s
        """, [start_date, ctx.tenant_id])
        
        # Get deals stats
        deals_stats = ctx.db.query("""
            SELECT 
                COUNT(*) as total_deals,
                COUNT(CASE WHEN created_at >= %s THEN 1 END) as new_deals,
                COUNT(CASE WHEN status = 'won' AND updated_at >= %s THEN 1 END) as won_deals,
                SUM(CASE WHEN status = 'won' AND updated_at >= %s THEN value ELSE 0 END) as won_value
            FROM deals 
            WHERE tenant_id = %s
        """, [start_date, start_date, start_date, ctx.tenant_id])
        
        # Get tasks stats
        tasks_stats = ctx.db.query("""
            SELECT 
                COUNT(*) as total_tasks,
                COUNT(CASE WHEN created_at >= %s THEN 1 END) as new_tasks,
                COUNT(CASE WHEN status = 'done' AND updated_at >= %s THEN 1 END) as completed_tasks
            FROM tasks 
            WHERE tenant_id = %s
        """, [start_date, start_date, ctx.tenant_id])
        
        # Get projects stats
        projects_stats = ctx.db.query("""
            SELECT 
                COUNT(*) as total_projects,
                COUNT(CASE WHEN created_at >= %s THEN 1 END) as new_projects,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_projects
            FROM projects 
            WHERE tenant_id = %s
        """, [start_date, ctx.tenant_id])
        
        # Combine stats
        stats = {
            "period": {
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat()
            },
            "contacts": contacts_stats[0] if contacts_stats else {},
            "deals": deals_stats[0] if deals_stats else {},
            "tasks": tasks_stats[0] if tasks_stats else {},
            "projects": projects_stats[0] if projects_stats else {}
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting weekly stats: {e}")
        return {}

def generate_digest_content(stats: Dict[str, Any], ctx) -> str:
    """Generate digest content from statistics"""
    try:
        # Get email template from secrets
        template = ctx.secrets.get("DIGEST_EMAIL_TEMPLATE", """
        # Weekly CRM Digest
        
        ## Period: {start_date} to {end_date}
        
        ## ðŸ“Š Summary
        
        **Contacts:**
        - Total: {total_contacts}
        - New this week: {new_contacts}
        - Qualified leads: {qualified_leads}
        
        **Deals:**
        - Total: {total_deals}
        - New this week: {new_deals}
        - Won this week: {won_deals}
        - Value won: ${won_value:,.0f}
        
        **Tasks:**
        - Total: {total_tasks}
        - New this week: {new_tasks}
        - Completed this week: {completed_tasks}
        
        **Projects:**
        - Total: {total_projects}
        - New this week: {new_projects}
        - Active: {active_projects}
        
        ## ðŸŽ¯ Key Insights
        
        {insights}
        
        ## ðŸ“ˆ Recommendations
        
        {recommendations}
        
        ---
        Generated by SBH CRM Weekly Digest Plugin
        """)
        
        # Calculate insights
        insights = []
        recommendations = []
        
        # Contact insights
        if stats.get('contacts', {}).get('new_contacts', 0) > 0:
            insights.append(f"Added {stats['contacts']['new_contacts']} new contacts this week")
        
        if stats.get('contacts', {}).get('qualified_leads', 0) > 0:
            insights.append(f"Have {stats['contacts']['qualified_leads']} qualified leads in pipeline")
        
        # Deal insights
        if stats.get('deals', {}).get('won_deals', 0) > 0:
            insights.append(f"Won {stats['deals']['won_deals']} deals worth ${stats['deals'].get('won_value', 0):,.0f}")
        
        # Task insights
        completion_rate = 0
        if stats.get('tasks', {}).get('total_tasks', 0) > 0:
            completion_rate = (stats['tasks']['completed_tasks'] / stats['tasks']['total_tasks']) * 100
            insights.append(f"Task completion rate: {completion_rate:.1f}%")
        
        # Generate recommendations
        if stats.get('contacts', {}).get('qualified_leads', 0) < 5:
            recommendations.append("Focus on lead generation to increase qualified leads")
        
        if completion_rate < 70:
            recommendations.append("Improve task completion rate by setting clearer priorities")
        
        if stats.get('deals', {}).get('won_deals', 0) == 0:
            recommendations.append("Review sales pipeline and focus on closing deals")
        
        # Format template
        content = template.format(
            start_date=stats['period']['start_date'],
            end_date=stats['period']['end_date'],
            total_contacts=stats.get('contacts', {}).get('total_contacts', 0),
            new_contacts=stats.get('contacts', {}).get('new_contacts', 0),
            qualified_leads=stats.get('contacts', {}).get('qualified_leads', 0),
            total_deals=stats.get('deals', {}).get('total_deals', 0),
            new_deals=stats.get('deals', {}).get('new_deals', 0),
            won_deals=stats.get('deals', {}).get('won_deals', 0),
            won_value=stats.get('deals', {}).get('won_value', 0),
            total_tasks=stats.get('tasks', {}).get('total_tasks', 0),
            new_tasks=stats.get('tasks', {}).get('new_tasks', 0),
            completed_tasks=stats.get('tasks', {}).get('completed_tasks', 0),
            total_projects=stats.get('projects', {}).get('total_projects', 0),
            new_projects=stats.get('projects', {}).get('new_projects', 0),
            active_projects=stats.get('projects', {}).get('active_projects', 0),
            insights='\n'.join(insights) if insights else "No significant activity this week",
            recommendations='\n'.join(recommendations) if recommendations else "Keep up the good work!"
        )
        
        return content
        
    except Exception as e:
        logger.error(f"Error generating digest content: {e}")
        return "Error generating weekly digest content"

@job("weekly_digest")
def generate_weekly_digest(ctx) -> None:
    """Generate and send weekly digest"""
    try:
        logger.info(f"Starting weekly digest generation for tenant {ctx.tenant_id}")
        
        # Get weekly statistics
        stats = get_weekly_stats(ctx)
        
        if not stats:
            logger.warning("No statistics available for weekly digest")
            return
        
        # Generate digest content
        digest_content = generate_digest_content(stats, ctx)
        
        # Get recipient emails from secrets
        recipient_emails = ctx.secrets.get("RECIPIENT_EMAILS", "")
        if not recipient_emails:
            logger.warning("No recipient emails configured for weekly digest")
            return
        
        # Parse recipient emails
        emails = [email.strip() for email in recipient_emails.split(',') if email.strip()]
        
        if not emails:
            logger.warning("No valid recipient emails found")
            return
        
        # Generate PDF report
        report_data = {
            "type": "weekly_digest",
            "title": f"Weekly Digest - {datetime.utcnow().strftime('%Y-%m-%d')}",
            "content": digest_content,
            "stats": stats,
            "generated_at": datetime.utcnow().isoformat()
        }
        
        # Create report using existing report engine
        report_result = ctx.http.post(
            f"{ctx.base_url}/api/ai/reports/run",
            json={
                "type": "weekly_digest",
                "name": f"Weekly Digest - {datetime.utcnow().strftime('%Y-%m-%d')}",
                "params": report_data
            },
            headers={"Authorization": f"Bearer {ctx.api_key}"}
        )
        
        report_url = None
        if report_result.status_code == 200:
            report_data = report_result.json()
            report_url = report_data.get('data', {}).get('attributes', {}).get('file_url')
        
        # Send digest emails
        for email in emails:
            try:
                # Prepare email content
                email_body = digest_content
                if report_url:
                    email_body += f"\n\nðŸ“Ž Download full report: {report_url}"
                
                # Send email
                email_result = ctx.email.send(
                    to=email,
                    subject=f"Weekly CRM Digest - {datetime.utcnow().strftime('%Y-%m-%d')}",
                    body=email_body,
                    from_email="digest@sbh.com"
                )
                
                logger.info(f"Weekly digest sent to {email}: {email_result}")
                
                # Track analytics
                ctx.analytics.track("weekly_digest.sent", {
                    "recipient_email": email,
                    "tenant_id": ctx.tenant_id,
                    "report_url": report_url
                })
                
            except Exception as e:
                logger.error(f"Error sending digest to {email}: {e}")
                continue
        
        # Emit webhook event
        ctx.emit("report.generated", {
            "type": "weekly_digest",
            "recipients": emails,
            "stats": stats,
            "report_url": report_url
        })
        
        logger.info(f"Weekly digest completed for tenant {ctx.tenant_id}")
        
    except Exception as e:
        logger.error(f"Error generating weekly digest: {e}")
        raise

@route("/ping", methods=["GET"])
def ping(ctx) -> Dict[str, str]:
    """Health check endpoint"""
    return {"status": "ok", "plugin": "weekly-digest", "timestamp": datetime.utcnow().isoformat()}

@route("/generate", methods=["POST"])
def generate_digest_manual(ctx) -> Dict[str, Any]:
    """Manually generate and send digest"""
    try:
        # Generate digest
        generate_weekly_digest(ctx)
        
        return {
            "success": True,
            "message": "Weekly digest generated and sent successfully"
        }
        
    except Exception as e:
        return {"error": f"Error generating digest: {str(e)}"}

@route("/stats", methods=["GET"])
def get_stats(ctx) -> Dict[str, Any]:
    """Get current weekly statistics"""
    try:
        stats = get_weekly_stats(ctx)
        
        return {
            "success": True,
            "stats": stats
        }
        
    except Exception as e:
        return {"error": f"Error getting stats: {str(e)}"}

@hook("plugin.installed")
def on_install(ctx) -> None:
    """Plugin installation hook"""
    logger.info(f"Weekly Digest plugin installed for tenant {ctx.tenant_id}")
    
    # Set default email template if not provided
    if not ctx.secrets.get("DIGEST_EMAIL_TEMPLATE"):
        ctx.secrets.set("DIGEST_EMAIL_TEMPLATE", """
        # Weekly CRM Digest
        
        ## Period: {start_date} to {end_date}
        
        ## ðŸ“Š Summary
        
        **Contacts:**
        - Total: {total_contacts}
        - New this week: {new_contacts}
        - Qualified leads: {qualified_leads}
        
        **Deals:**
        - Total: {total_deals}
        - New this week: {new_deals}
        - Won this week: {won_deals}
        - Value won: ${won_value:,.0f}
        
        **Tasks:**
        - Total: {total_tasks}
        - New this week: {new_tasks}
        - Completed this week: {completed_tasks}
        
        **Projects:**
        - Total: {total_projects}
        - New this week: {new_projects}
        - Active: {active_projects}
        
        ## ðŸŽ¯ Key Insights
        
        {insights}
        
        ## ðŸ“ˆ Recommendations
        
        {recommendations}
        
        ---
        Generated by SBH CRM Weekly Digest Plugin
        """)

@hook("plugin.uninstalled")
def on_uninstall(ctx) -> None:
    """Plugin uninstallation hook"""
    logger.info(f"Weekly Digest plugin uninstalled for tenant {ctx.tenant_id}")
    
    # Clean up any plugin-specific data
    # (In this case, no cleanup needed)
