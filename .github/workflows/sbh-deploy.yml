name: SBH Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (defaults to commit SHA)"
        required: false
        default: ""
  push:
    branches: [ main ]
    paths:
      - "apps/backend/**"
      - ".github/workflows/sbh-deploy.yml"

env:
  AWS_REGION: us-west-2
  ACCOUNT_ID: 776567512687
  ECR_REGISTRY: 776567512687.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPO: sbh-repo-dev
  ECS_CLUSTER: sbh-cluster-dev
  ECS_SERVICE: sbh-service-dev
  TASK_FAMILY: sbh-task-dev
  CONTAINER_NAME: sbh-backend
  LOG_GROUP: /ecs/sbh-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/GitHubActionsECRPush
          role-session-name: sbh-deploy-${{ github.run_id }}

      - name: Ensure deps (jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Ensure ECR repository exists
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPO }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPO }}" >/dev/null

      - name: Ensure log group exists (no-op if present)
        run: |
          set -euo pipefail
          aws logs describe-log-groups --log-group-name-prefix "${{ env.LOG_GROUP }}" \
            --query "logGroups[?logGroupName=='${{ env.LOG_GROUP }}'] | length(@)" \
            --output text | grep -q '^1$' || \
          aws logs create-log-group --log-group-name "${{ env.LOG_GROUP }}" || true

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: image-tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        run: |
          set -euo pipefail
          IMAGE_TAG="${{ steps.image-tag.outputs.tag }}"
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${IMAGE_TAG}"
          LATEST_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest"

          echo "Building ${IMAGE_URI}"
          docker buildx build \
            --platform linux/amd64 \
            --tag "${IMAGE_URI}" \
            --tag "${LATEST_URI}" \
            --push \
            -f apps/backend/Dockerfile \
            apps/backend

          echo "IMAGE_URI=${IMAGE_URI}" >> "$GITHUB_ENV"

      - name: Fetch current task definition
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query 'taskDefinition' \
            --output json > current-task-def.json

      - name: Render updated task definition (only change image; keep everything else)
        run: |
          set -euo pipefail
          # Build a "clean" payload with only keys ECS accepts for register-task-definition.
          # Then surgically update the image of the desired container.
          jq \
            --arg CN "${{ env.CONTAINER_NAME }}" \
            --arg IMG "${IMAGE_URI}" '
              # Switch the container image
              .containerDefinitions |= (map(
                if .name == $CN then (.image = $IMG) else . end
              ))
              # Rebuild a minimal, valid register payload with allowed fields only
              | {
                  family,
                  taskRoleArn,
                  executionRoleArn,
                  networkMode,
                  containerDefinitions,
                  volumes,
                  placementConstraints,
                  requiresCompatibilities,
                  cpu,
                  memory,
                  runtimePlatform,
                  proxyConfiguration,
                  ephemeralStorage
                }
              # Drop any nulls (optional keys not in the current TD)
              | with_entries(select(.value != null))
            ' current-task-def.json > final-task-def.json

          echo "Preview of final task def (name + image):"
          jq '{family, containerDefinitions: [.containerDefinitions[] | {name, image}] }' final-task-def.json

      - name: Register new task definition
        id: register-td
        run: |
          set -euo pipefail
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TD_ARN=${NEW_TD_ARN}" >> "$GITHUB_OUTPUT"
          echo "Registered: ${NEW_TD_ARN}"

      - name: Update ECS Service
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${{ steps.register-td.outputs.NEW_TD_ARN }}" \
            --force-new-deployment \
            --output table

      - name: Wait for service stability
        run: |
          set -euo pipefail
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"
          echo "Service stable."

      - name: Target group health
        id: tg
        run: |
          set -euo pipefail
          TG_ARN=$(aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)

          if [ "$TG_ARN" != "None" ] && [ -n "$TG_ARN" ]; then
            echo "TG_ARN=${TG_ARN}" >> "$GITHUB_OUTPUT"
            aws elbv2 describe-target-health \
              --target-group-arn "$TG_ARN" \
              --query 'TargetHealthDescriptions[*].{Target:Target.Id,Port:Target.Port,Health:TargetHealth.State,Reason:TargetHealth.Reason}' \
              --output table
          else
            echo "TG_ARN=" >> "$GITHUB_OUTPUT"
            echo "No target group on service."
          fi

      - name: App health probe
        run: |
          set -euo pipefail
          for i in {1..6}; do
            if curl -fsS "https://sbh.umbervale.com/api/ai-chat/health" > /dev/null; then
              echo "‚úÖ App healthy"
              curl -fsS "https://sbh.umbervale.com/api/ai-chat/health" | jq .
              exit 0
            fi
            echo "‚è≥ Health attempt $i/6 failed; retrying in 10s‚Ä¶"
            sleep 10
          done
          echo "‚ùå App health check failed"
          exit 1

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment Summary"
          echo "Image: ${IMAGE_URI}"
          echo "Task Definition: ${{ steps.register-td.outputs.NEW_TD_ARN }}"
          echo "Service: ${{ env.ECS_CLUSTER }}/${{ env.ECS_SERVICE }}"
          echo "Target Group: ${{ steps.tg.outputs.TG_ARN }}"
          echo "URL: https://sbh.umbervale.com/api/ai-chat/health"
