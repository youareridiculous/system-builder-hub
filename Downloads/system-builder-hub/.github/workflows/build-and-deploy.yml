name: Build and Deploy SBH to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: sbh-repo-dev
  ECS_CLUSTER: sbh-cluster-dev
  ECS_SERVICE: sbh-service-dev
  ECS_TASK_DEFINITION: sbh-task-dev
  IMAGE_URI: 776567512687.dkr.ecr.us-west-2.amazonaws.com/sbh-repo-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::776567512687:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}
        echo "Building image with tag: $IMAGE_TAG"
        
        docker buildx build \
          --platform linux/amd64 \
          -t ${{ env.IMAGE_URI }}:latest \
          -t ${{ env.IMAGE_URI }}:$IMAGE_TAG \
          --push \
          backend
        
        echo "image-uri=${{ env.IMAGE_URI }}:latest" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get current task definition
      id: get-task-def
      run: |
        TASK_DEF_ARN=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].taskDefinition' \
          --output text)
        
        echo "Current task definition: $TASK_DEF_ARN"
        
        aws ecs describe-task-definition \
          --task-definition $TASK_DEF_ARN \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition' > current-task-def.json
        
        echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update task definition with new image
      id: update-task-def
      run: |
        # Update the container image in the task definition
        jq --arg IMAGE_URI "${{ steps.build-image.outputs.image-uri }}" \
          '.containerDefinitions[0].image = $IMAGE_URI' \
          current-task-def.json > new-task-def.json
        
        # Remove fields that shouldn't be in the registration request
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          new-task-def.json > task-def-to-register.json
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-def-to-register.json \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "New task definition: $NEW_TASK_DEF_ARN"
        echo "new-task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.update-task-def.outputs.new-task-def-arn }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Verify deployment
      run: |
        echo "Checking service status..."
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{runningCount:runningCount,desiredCount:desiredCount,status:status}'
        
        echo "Testing health endpoint..."
        sleep 30
        curl -f https://sbh.umbervale.com/api/health || echo "Health check failed, but deployment completed"

    - name: Output deployment info
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image URI**: ${{ steps.build-image.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: ${{ steps.build-image.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Task Definition**: ${{ steps.update-task-def.outputs.new-task-def-arn }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECS Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECS Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
