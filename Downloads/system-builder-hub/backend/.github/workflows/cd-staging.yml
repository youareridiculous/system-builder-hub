name: CD Staging

on:
  push:
    tags:
      - 'v*-rc*'  # Release candidates

env:
  STAGING_SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
  STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract version
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "target_version=${VERSION%-rc*}" >> $GITHUB_OUTPUT
    
    - name: Create release
      run: |
        python -m src.cli releases create \
          --target revops_suite \
          --version ${{ steps.extract_version.outputs.target_version }} \
          --notes "Release candidate for staging deployment"
    
    - name: Generate staging artifacts
      run: |
        python -m src.cli deploy generate-compose \
          --bundle revops_suite_staging \
          --output docker-compose.staging.yml
        
        python -m src.cli deploy generate-manifest \
          --bundle revops_suite_staging \
          --output k8s-staging.yml
    
    - name: Validate deployment bundle
      run: |
        python -m src.cli deploy validate --bundle revops_suite_staging
    
    - name: Deploy to staging (dry-run)
      run: |
        python -m src.cli releases promote \
          --target revops_suite \
          --version ${{ steps.extract_version.outputs.target_version }} \
          --env staging \
          --dry-run
    
    - name: Deploy to staging
      run: |
        python -m src.cli releases promote \
          --target revops_suite \
          --version ${{ steps.extract_version.outputs.target_version }} \
          --env staging
    
    - name: Wait for deployment
      run: |
        echo "Waiting for staging deployment to complete..."
        sleep 30
    
    - name: Verify deployment
      run: |
        # Check if staging environment is healthy
        curl -f http://staging.example.com/healthz || echo "Staging health check failed"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staging-artifacts-${{ steps.extract_version.outputs.target_version }}
        path: |
          docker-compose.staging.yml
          k8s-staging.yml
        retention-days: 30
