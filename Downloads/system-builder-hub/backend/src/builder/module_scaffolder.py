"""
Module Scaffolder for System Builder Hub
Generates complete modules from specifications
"""

import os
import json
import uuid
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
import logging

logger = logging.getLogger(__name__)

class ModuleScaffolder:
    """Scaffolds complete modules from specifications"""
    
    def __init__(self):
        self.base_path = Path.cwd()
        self.marketplace_path = self.base_path / "marketplace"
        self.src_path = self.base_path / "src"
        self.migrations_path = self.base_path / "alembic" / "versions"
        
    def build_module(self, name: str, title: str, version: str, category: str, 
                    features: List[str], plans: List[str], spec: str) -> None:
        """Build a complete module from specification"""
        logger.info(f"Building module: {name}")
        
        # Create marketplace entry
        self._create_marketplace_entry(name, title, version, category, features, plans, spec)
        
        # Create module directory structure
        self._create_module_structure(name, features)
        
        # Create Alembic migration
        self._create_migration(name, features)
        
        # Create onboarding guide
        self._create_onboarding_guide(name, title, features)
        
        logger.info(f"âœ… Module {name} scaffolded successfully!")
    
    def _create_marketplace_entry(self, name: str, title: str, version: str, 
                                 category: str, features: List[str], plans: List[str], spec: str) -> None:
        """Create marketplace JSON entry"""
        marketplace_file = self.marketplace_path / f"{name}.json"
        
        # Create plans structure
        plans_dict = {}
        for plan in plans:
            plan_name = plan.capitalize()
            plans_dict[plan] = {
                "name": plan_name,
                "price": 99 if plan == "starter" else 299 if plan == "pro" else 799,
                "billing_cycle": "monthly",
                "features": [f"Up to {1000 if plan == 'starter' else 10000 if plan == 'pro' else 'unlimited'} {name} items"]
            }
        
        marketplace_data = {
            "slug": name,
            "name": title,
            "description": spec,
            "category": category,
            "tags": [name, category.lower()],
            "version": version,
            "author": "SBH Team",
            "features": features,
            "plans": plans_dict,
            "is_active": True,
            "created_at": datetime.utcnow().isoformat() + "Z",
            "updated_at": datetime.utcnow().isoformat() + "Z"
        }
        
        with open(marketplace_file, 'w') as f:
            json.dump(marketplace_data, f, indent=2)
        
        logger.info(f"Created marketplace entry: {marketplace_file}")
    
    def _create_module_structure(self, name: str, features: List[str]) -> None:
        """Create module directory structure"""
        module_path = self.src_path / name
        
        # Create module directory
        module_path.mkdir(exist_ok=True)
        
        # Create __init__.py
        init_content = f'''"""
{name.title()} Module
Generated by System Builder Hub
"""

__version__ = "1.0.0"
__description__ = "Generated {name} module"
'''
        with open(module_path / "__init__.py", 'w') as f:
            f.write(init_content)
        
        # Create models.py
        models_content = self._generate_models_content(name, features)
        with open(module_path / "models.py", 'w') as f:
            f.write(models_content)
        
        # Create API directory
        api_path = module_path / "api"
        api_path.mkdir(exist_ok=True)
        
        # Create API __init__.py
        api_init_content = f'''"""
{name.title()} API Module
"""
'''
        with open(api_path / "__init__.py", 'w') as f:
            f.write(api_init_content)
        
        # Create sample API blueprint
        sample_feature = features[0] if features else name
        api_content = self._generate_api_content(name, sample_feature)
        with open(api_path / f"{sample_feature}_api.py", 'w') as f:
            f.write(api_content)
        
        # Create seed.py
        seed_content = self._generate_seed_content(name, features)
        with open(module_path / "seed.py", 'w') as f:
            f.write(seed_content)
        
        # Create cli.py
        cli_content = self._generate_cli_content(name)
        with open(module_path / "cli.py", 'w') as f:
            f.write(cli_content)
        
        # Create README.md
        readme_content = self._generate_readme_content(name, features)
        with open(module_path / "README.md", 'w') as f:
            f.write(readme_content)
        
        # Create scaffold.spec.md
        spec_content = self._generate_spec_content(name, features)
        with open(module_path / "scaffold.spec.md", 'w') as f:
            f.write(spec_content)
        
        logger.info(f"Created module structure: {module_path}")
    
    def _generate_models_content(self, name: str, features: List[str]) -> str:
        """Generate models.py content"""
        content = f'''import uuid
from datetime import datetime
from sqlalchemy import Column, String, Integer, Float, DateTime, Boolean, Text, ForeignKey, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

# TODO: Implement models based on features: {features}
# This is a scaffold - implement actual models based on your requirements

class {name.title()}Base(Base):
    """Base model for {name} module"""
    __abstract__ = True
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    tenant_id = Column(String(255), nullable=False, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

# TODO: Add specific models for each feature:
'''
        
        for feature in features:
            feature_singular = feature.rstrip('s') if feature.endswith('s') else feature
            content += f'''
class {feature_singular.title()}({name.title()}Base):
    """{feature_singular.title()} model"""
    __tablename__ = '{feature}'
    
    name = Column(String(255), nullable=False)
    description = Column(Text)
    status = Column(String(50), default='active')
    metadata = Column(JSON)
    
    # TODO: Add relationships and additional fields as needed
'''
        
        return content
    
    def _generate_api_content(self, name: str, feature: str) -> str:
        """Generate API blueprint content"""
        feature_singular = feature.rstrip('s') if feature.endswith('s') else feature
        
        content = f'''import logging
from flask import Blueprint, request, jsonify, current_app
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import uuid
from src.db_core import get_database_url
from src.security.decorators import require_tenant_context

logger = logging.getLogger(__name__)

{feature}_bp = Blueprint('{feature}', __name__, url_prefix='/api/{name}/{feature}')

def get_db_session():
    engine = create_engine(get_database_url())
    Session = sessionmaker(bind=engine)
    return Session()

@{feature}_bp.route('/', methods=['GET'])
@require_tenant_context
def list_{feature}():
    """List all {feature} for the current tenant"""
    # TODO: Implement actual listing logic
    return jsonify({{"message": "List {feature} endpoint - TODO: implement"}})

@{feature}_bp.route('/', methods=['POST'])
@require_tenant_context
def create_{feature_singular}():
    """Create a new {feature_singular}"""
    # TODO: Implement actual creation logic
    return jsonify({{"message": "Create {feature_singular} endpoint - TODO: implement"}})

@{feature}_bp.route('/<{feature_singular}_id>', methods=['GET'])
@require_tenant_context
def get_{feature_singular}({feature_singular}_id):
    """Get a specific {feature_singular}"""
    # TODO: Implement actual retrieval logic
    return jsonify({{"message": "Get {feature_singular} endpoint - TODO: implement"}})

@{feature}_bp.route('/<{feature_singular}_id>', methods=['PUT'])
@require_tenant_context
def update_{feature_singular}({feature_singular}_id):
    """Update a {feature_singular}"""
    # TODO: Implement actual update logic
    return jsonify({{"message": "Update {feature_singular} endpoint - TODO: implement"}})

@{feature}_bp.route('/<{feature_singular}_id>', methods=['DELETE'])
@require_tenant_context
def delete_{feature_singular}({feature_singular}_id):
    """Delete a {feature_singular}"""
    # TODO: Implement actual deletion logic
    return jsonify({{"message": "Delete {feature_singular} endpoint - TODO: implement"}})
'''
        return content
    
    def _generate_seed_content(self, name: str, features: List[str]) -> str:
        """Generate seed.py content"""
        content = f'''import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import uuid
from src.db_core import get_database_url

logger = logging.getLogger(__name__)

def get_db_session():
    engine = create_engine(get_database_url())
    Session = sessionmaker(bind=engine)
    return Session()

def seed_{name}_data(tenant_id: str = 'demo'):
    """Seed demo data for {name} module"""
    logger.info(f"Seeding {name} data for tenant: {{tenant_id}}")
    
    session = get_db_session()
    
    try:
        # TODO: Implement actual seeding logic for features: {features}
        # This is a scaffold - add actual data creation based on your models
        
        for feature in {features}:
            # Check if table exists
            result = session.execute(text(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{{feature}}'"))
            if result.fetchone():
                # TODO: Insert demo data for {{feature}}
                logger.info(f"  TODO: Seed data for {{feature}} table")
            else:
                logger.info(f"  Table {{feature}} does not exist yet")
        
        session.commit()
        logger.info(f"âœ… {name} seeding completed for tenant: {{tenant_id}}")
        
    except Exception as e:
        logger.error(f"Failed to seed {name} data: {{e}}")
        session.rollback()
        raise
    finally:
        session.close()
'''
        return content
    
    def _generate_cli_content(self, name: str) -> str:
        """Generate cli.py content"""
        content = f'''import click
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from .seed import seed_{name}_data
from src.db_core import get_database_url

logger = logging.getLogger(__name__)

def get_db_session():
    engine = create_engine(get_database_url())
    Session = sessionmaker(bind=engine)
    return Session()

@click.group()
def {name}():
    """{{name.title()}} management commands"""
    pass

@{name}.command()
@click.option('--tenant', default='demo', help='Tenant ID for seeding')
def seed(tenant):
    """Seed demo data for {name} module"""
    seed_{name}_data(tenant)

@{name}.command()
@click.option('--tenant', default='demo', help='Tenant ID to check')
def status(tenant):
    """Check {name} module status"""
    logger.info(f"Checking {name} status for tenant: {{tenant}}")
    
    session = get_db_session()
    try:
        # TODO: Implement actual status checking
        logger.info(f"  TODO: Check {name} tables and data")
        logger.info(f"âœ… {name} status check completed for tenant: {{tenant}}")
    except Exception as e:
        logger.error(f"Failed to check {name} status: {{e}}")
        raise
    finally:
        session.close()

@{name}.command()
@click.option('--tenant', default='demo', help='Tenant ID to reset')
def reset(tenant):
    """Reset {name} module data"""
    logger.info(f"Resetting {name} data for tenant: {{tenant}}")
    
    session = get_db_session()
    try:
        # TODO: Implement actual reset logic
        logger.info(f"  TODO: Reset {name} data for tenant {{tenant}}")
        logger.info(f"âœ… {name} reset completed for tenant: {{tenant}}")
    except Exception as e:
        logger.error(f"Failed to reset {name} data: {{e}}")
        session.rollback()
        raise
    finally:
        session.close()
'''
        return content
    
    def _generate_readme_content(self, name: str, features: List[str]) -> str:
        """Generate README.md content"""
        content = f'''# {name.title()} Module

This module was generated by System Builder Hub.

## Features

{chr(10).join([f"- {feature}" for feature in features])}

## Structure

- `models.py` - Database models (TODO: implement based on requirements)
- `api/` - Flask API blueprints
- `seed.py` - Demo data seeding
- `cli.py` - Command-line interface

## Usage

### CLI Commands

```bash
# Seed demo data
python -m src.cli {name} seed --tenant demo

# Check status
python -m src.cli {name} status --tenant demo

# Reset data
python -m src.cli {name} reset --tenant demo
```

### API Endpoints

- `GET /api/{name}/` - List resources
- `POST /api/{name}/` - Create resource
- `GET /api/{name}/<id>` - Get resource
- `PUT /api/{name}/<id>` - Update resource
- `DELETE /api/{name}/<id>` - Delete resource

## Next Steps

1. Implement actual models in `models.py`
2. Add business logic to API endpoints
3. Create comprehensive seed data
4. Add tests
5. Customize onboarding guide

## Generated Files

- `scaffold.spec.md` - Original specification and parsed fields
'''
        return content
    
    def _generate_spec_content(self, name: str, features: List[str]) -> str:
        """Generate scaffold.spec.md content"""
        content = f'''# {name.title()} Module Specification

## Original Specification

This module was generated from the following specification:
TODO: Add original spec text here

## Parsed Fields

- **Name**: {name}
- **Title**: TODO: Add title
- **Version**: TODO: Add version
- **Category**: TODO: Add category
- **Features**: {features}
- **Plans**: TODO: Add plans

## Generated Artifacts

- Marketplace entry: `marketplace/{name}.json`
- Module structure: `src/{name}/`
- Database migration: `alembic/versions/`
- Onboarding guide: `marketplace/onboarding/{name}.onboarding.json`

## TODO for LLM Expansion

- [ ] Implement actual models based on features
- [ ] Add business logic to API endpoints
- [ ] Create comprehensive seed data
- [ ] Add validation and error handling
- [ ] Implement relationships between models
- [ ] Add tests
- [ ] Customize onboarding steps
'''
        return content
    
    def _create_migration(self, name: str, features: List[str]) -> None:
        """Create Alembic migration"""
        # Generate revision ID
        revision_id = str(uuid.uuid4()).replace('-', '')[:12]
        migration_file = self.migrations_path / f"{revision_id}_add_{name}_tables.py"
        
        # Get latest revision
        latest_revision = self._get_latest_revision()
        
        migration_content = f'''"""Add {name} tables

Revision ID: {revision_id}
Revises: {latest_revision}
Create Date: {datetime.utcnow().isoformat()}

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '{revision_id}'
down_revision = '{latest_revision}'
branch_labels = None
depends_on = None

def upgrade():
    """Create {name} tables"""
    # TODO: Implement table creation based on features: {features}
    
    # Example table creation (customize based on actual features):
'''
        
        for feature in features:
            feature_singular = feature.rstrip('s') if feature.endswith('s') else feature
            migration_content += f'''
    op.create_table('{feature}',
        sa.Column('id', sa.String(36), nullable=False),
        sa.Column('tenant_id', sa.String(255), nullable=False),
        sa.Column('name', sa.String(255), nullable=False),
        sa.Column('description', sa.Text),
        sa.Column('status', sa.String(50), default='active'),
        sa.Column('metadata', sa.JSON),
        sa.Column('created_at', sa.DateTime, default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime, default=sa.func.now(), onupdate=sa.func.now()),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_{feature}_tenant_id', '{feature}', ['tenant_id'])
'''
        
        migration_content += f'''

def downgrade():
    """Drop {name} tables"""
    # TODO: Implement table dropping
'''
        
        for feature in features:
            migration_content += f'''
    op.drop_index('ix_{feature}_tenant_id', table_name='{feature}')
    op.drop_table('{feature}')
'''
        
        with open(migration_file, 'w') as f:
            f.write(migration_content)
        
        logger.info(f"Created migration: {migration_file}")
    
    def _get_latest_revision(self) -> str:
        """Get the latest Alembic revision"""
        try:
            # This is a simplified approach - in practice, you'd parse alembic.ini
            # For now, we'll use a placeholder
            return "694e7cbf6b05"  # This should be the actual latest revision
        except Exception:
            return "694e7cbf6b05"
    
    def _create_onboarding_guide(self, name: str, title: str, features: List[str]) -> None:
        """Create onboarding guide"""
        onboarding_file = self.marketplace_path / "onboarding" / f"{name}.onboarding.json"
        onboarding_file.parent.mkdir(exist_ok=True)
        
        steps = [
            {"id": "welcome", "title": f"Welcome to {title}", "type": "info"},
            {"id": "setup", "title": "Initial Setup", "type": "form"},
        ]
        
        for i, feature in enumerate(features, 1):
            steps.append({
                "id": f"{feature}_setup",
                "title": f"Set Up {feature.title()}",
                "type": "action"
            })
        
        steps.extend([
            {"id": "configure", "title": "Configure Settings", "type": "form"},
            {"id": "test", "title": "Test Your Setup", "type": "action"},
            {"id": "complete", "title": "You're All Set!", "type": "completion"}
        ])
        
        onboarding_data = {
            "module": name,
            "name": title,
            "version": "1.0.0",
            "description": f"Complete onboarding checklist for {title} setup and configuration",
            "estimated_time": "30 minutes",
            "steps": steps,
            "tips": [
                f"Start with a few key {features[0] if features else 'items'} and expand gradually",
                "Review the documentation for advanced features"
            ],
            "support": {
                "contact": "support@sbh.com",
                "documentation": f"/ui/docs/{name}"
            }
        }
        
        with open(onboarding_file, 'w') as f:
            json.dump(onboarding_data, f, indent=2)
        
        logger.info(f"Created onboarding guide: {onboarding_file}")
