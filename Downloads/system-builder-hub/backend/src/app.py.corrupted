#!/usr/bin/env python3
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
System Builder Hub - Main Application
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
Priority 1: Core Infrastructure Foundation
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
Priority 2: Advanced Features (P11-P20)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
Priority 3: Intelligence & Diagnostics (P21-P29)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
Complete rebuild with systematic priority integration
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# 🔧 Core Imports and Configuration
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import os
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import sys
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import json
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import sqlite3
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import threading
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import time
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import uuid
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import hashlib
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import hmac
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import base64
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import re
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import ipaddress
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import yaml
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import tempfile
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import shutil
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import zipfile
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import tarfile
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
import logging
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from datetime import datetime, timedelta
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from dataclasses import dataclass, asdict
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from enum import Enum
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from typing import Dict, List, Optional, Tuple, Any, Union
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from pathlib import Path
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from werkzeug.utils import secure_filename
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from dotenv import load_dotenv
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# Flask and Web Framework
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from flask import Flask, request, jsonify, render_template, redirect, url_for, flash, send_from_directory, send_file
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from flask_cors import CORS
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# Load environment variables
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
load_dotenv()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# 🔧 Configuration
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
class Config:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Application configuration"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    DEBUG = os.getenv('FLASK_ENV') == 'development'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    BOOT_MODE = os.getenv('SBH_BOOT_MODE', 'safe')  # safe or full
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # Database
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    DATABASE = os.getenv('DATABASE_URL', 'sqlite:///system_builder_hub.db')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # Feature flags
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    FEATURE_BASELINE_CORE_LOOP = os.getenv('FEATURE_BASELINE_CORE_LOOP', 'true').lower() == 'true'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # LLM Configuration
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    LLM_PROVIDER = os.getenv('LLM_PROVIDER', 'openai')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    LLM_API_KEY = os.getenv('LLM_API_KEY')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    LLM_DEFAULT_MODEL = os.getenv('LLM_DEFAULT_MODEL', 'gpt-3.5-turbo')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# 🔧 Lazy Imports with Fault Isolation
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
def safe_import(module_name: str, default=None):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Safely import a module with fault isolation"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        module = __import__(module_name)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return module
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    except ImportError as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        logging.warning(f"⚠️ Failed to import {module_name}: {e}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return default
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    except Exception as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        logging.error(f"❌ Error importing {module_name}: {e}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return default
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# 🔧 Infrastructure Components (Lazy Loaded)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
background = safe_import('background')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
memory = safe_import('memory')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
template_gen = safe_import('template_gen')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
client_success = safe_import('client_success')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
collab_workspace = safe_import('collab_workspace')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# 🔧 Core Components (Always Available)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.blueprint_registry import blueprint_registry
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.llm_config_api import llm_config_bp
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.llm_status_api import llm_status_bp
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.llm_dry_run_api import llm_dry_run_bp
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.ui_build_enhanced import ui_build_enhanced_bp
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
from src.llm_startup_validation import run_llm_startup_validation, get_llm_validation_summary
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
# Configure logging
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
logging.basicConfig(level=logging.INFO)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
logger = logging.getLogger(__name__)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
def create_app():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Create Flask application with minimal boot mode support"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    app = Flask(__name__)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    app.config.from_object(Config)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # Enable CORS
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    CORS(app)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # Initialize app storage
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    if not hasattr(app, 'projects'):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        app.projects = []
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    if not hasattr(app, 'systems'):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        app.systems = []
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    if not hasattr(app, 'llm_configs'):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        app.llm_configs = {}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Register Core Blueprints
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    register_core_blueprints(app)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Register Optional Blueprints (if available and enabled)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    if app.config['BOOT_MODE'] == 'full':
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        register_optional_blueprints(app)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Basic Routes
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/healthz')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def health_check():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Import version information
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            from version import APP_VERSION, VERSION_STRING, COMMIT_HASH, BRANCH
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        except ImportError:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            APP_VERSION = "0.1.0"
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            VERSION_STRING = APP_VERSION
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            COMMIT_HASH = None
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            BRANCH = None
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'status': 'ok',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'version': APP_VERSION,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'version_string': VERSION_STRING,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'commit_hash': COMMIT_HASH,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'branch': BRANCH,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'mode': app.config['BOOT_MODE'],
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'timestamp': datetime.utcnow().isoformat()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        })
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/readiness')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def readiness_check():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        """Readiness check endpoint"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            # Check database connectivity
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            db_ok = False
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                db_path = os.getenv('DATABASE_URL', 'sqlite:///./system_builder_hub.db')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                if db_path.startswith('sqlite:///'):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    db_file = db_path.replace('sqlite:///', '')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    if os.path.exists(db_file):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        import sqlite3
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        conn = sqlite3.connect(db_file)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        cursor = conn.cursor()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        cursor.execute("SELECT 1")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        conn.close()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        db_ok = True
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            except Exception:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                pass
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            # Check LLM availability
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            llm_ok = False
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                from llm_core import LLMAvailability
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                status = LLMAvailability.get_status()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                llm_ok = status.get('available', False)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            except Exception:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                pass
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            # Check migrations
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            migrations_ok = True  # Assume OK for now
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'db': db_ok,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'llm': llm_ok,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'migrations_applied': migrations_ok,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'timestamp': datetime.utcnow().isoformat()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            })
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        except Exception as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'db': False,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'llm': False,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'migrations_applied': False,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'error': str(e),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'timestamp': datetime.utcnow().isoformat()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            }), 500
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/openapi.json')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def openapi_spec():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        """OpenAPI specification"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        spec = {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'openapi': '3.0.0',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'info': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'title': 'System Builder Hub API',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'version': '1.0.0',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'description': 'API for System Builder Hub - Core Build Loop and LLM Integration'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'servers': [
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'url': '/',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'description': 'Default server'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            ],
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'paths': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/healthz': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'get': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'Health Check',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Check if the service is healthy',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'Service is healthy',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'status': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'version': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'timestamp': {'type': 'string'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/readiness': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'get': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'Readiness Check',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Check if the service is ready to serve requests',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'Service is ready',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'db': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'llm': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'migrations_applied': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'timestamp': {'type': 'string'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/api/llm/status': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'get': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'LLM Status',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Get LLM provider status and metrics',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'LLM status information',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'available': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'provider': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'model': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'providers': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                    'type': 'array',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                    'items': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                        'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                        'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                            'name': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                            'active': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                            'circuit_state': {'type': 'string'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/api/llm/test': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'post': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'Test LLM Connection',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Test LLM provider connection',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'Connection test successful',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'success': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'provider': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'model': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'latency_ms': {'type': 'integer'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/api/llm/provider/configure': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'post': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'Configure LLM Provider',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Configure LLM provider settings',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'requestBody': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            'required': True,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'provider': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'api_key': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'default_model': {'type': 'string'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'required': ['provider', 'api_key', 'default_model']
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'Provider configured successfully'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                '/api/build/start': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'post': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'summary': 'Start Build',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'description': 'Start a new system build',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'requestBody': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            'required': True,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'name': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'template_slug': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'no_llm_mode': {'type': 'boolean'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'required': ['name']
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'responses': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            '200': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'description': 'Build started successfully',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                'content': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    'application/json': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        'schema': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'type': 'object',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            'properties': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'success': {'type': 'boolean'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'project_id': {'type': 'string'},
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                                'system_id': {'type': 'string'}
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            },
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'components': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                'securitySchemes': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    'ApiKeyAuth': {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'type': 'apiKey',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'in': 'header',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        'name': 'X-API-Key'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Only serve OpenAPI in development
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        if app.config.get('DEBUG') or os.getenv('FLASK_ENV') == 'development':
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify(spec)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        else:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({'error': 'OpenAPI not available in production'}), 404
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/docs')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def docs():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        """API Documentation (Swagger UI)"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Only serve docs in development
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        if app.config.get('DEBUG') or os.getenv('FLASK_ENV') == 'development':
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return '''
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            <!DOCTYPE html>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            <html>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            <head>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                <title>SBH API Documentation</title>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css" />
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            </head>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            <body>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                <div id="swagger-ui"></div>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js"></script>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                <script>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    window.onload = function() {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        SwaggerUIBundle({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            url: '/openapi.json',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            dom_id: '#swagger-ui',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                            layout: "BaseLayout"
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                        });
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    };
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                </script>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            </body>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            </html>
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            '''
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        else:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({'error': 'Documentation not available in production'}), 404
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def index():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return redirect(url_for('dashboard'))
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/dashboard')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def dashboard():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return render_template('dashboard.html')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Core Build Loop Routes
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/ui/build')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def build_page():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return render_template('ui/build.html')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/ui/project-loader')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def project_loader_page():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return render_template('ui/project_loader.html')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/ui/visual-builder')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def visual_builder_page():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return render_template('ui/visual_builder.html')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/ui/preview')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 LLM Configuration Routes
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/llm/provider/status')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def llm_status():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        from src.llm_core import LLMAvailability
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify(LLMAvailability.get_status())
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/llm/test', methods=['POST'])
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def llm_test():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        from src.llm_core import LLMAvailability
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify(LLMAvailability.test_connection())
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/llm/provider/configure', methods=['POST'])
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def llm_configure():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        data = request.get_json()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        provider = data.get('provider')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        api_key = data.get('api_key')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        default_model = data.get('default_model')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        if not provider or not api_key:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({'error': 'Provider and API key required'}), 400
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Store configuration
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        app.llm_configs['default'] = {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'provider': provider,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'api_key': api_key,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'default_model': default_model or 'gpt-3.5-turbo'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Set environment variables
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        os.environ['LLM_PROVIDER'] = provider
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        os.environ['LLM_API_KEY'] = api_key
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        os.environ['LLM_DEFAULT_MODEL'] = default_model or 'gpt-3.5-turbo'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'success': True,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'provider': provider,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'model': default_model or 'gpt-3.5-turbo'
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        })
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Features Catalog
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/features/catalog')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def features_catalog():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        from src.features_catalog import get_features_for_role
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        role = request.args.get('role', 'viewer')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        features = get_features_for_role(role)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify(features)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Build Templates
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/build/templates')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def build_templates():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        from src.templates_catalog import TEMPLATES
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify(TEMPLATES)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Projects API
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/projects')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def get_projects():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify(app.projects)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/api/build/start', methods=['POST'])
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def start_build():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        data = request.get_json()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        name = data.get('name')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        template_slug = data.get('template_slug')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        if not name:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            return jsonify({'error': 'Project name required'}), 400
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        # Create project
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        project_id = f"proj_{len(app.projects) + 1}"
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        project = {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'id': project_id,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'name': name,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'created_at': '2024-01-01T00:00:00Z',
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'template_slug': template_slug
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        app.projects.append(project)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'project_id': project_id,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'system_id': f"sys_{project_id}"
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        })
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Diagnostics Endpoint
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.route('/admin/diagnostics/blueprints')
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def blueprint_diagnostics():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify({
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'boot_mode': app.config['BOOT_MODE'],
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'core_blueprints': list(app.blueprints.keys()),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            'optional_blueprints': get_optional_blueprint_status()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        })
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    # 🔧 Error Handlers
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.errorhandler(404)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def not_found(error):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return render_template('404.html'), 404
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    @app.errorhandler(500)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    def internal_error(error):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        return jsonify({'error': 'Internal server error'}), 500
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    logger.info(f"🚀 SBH started in {app.config['BOOT_MODE']} mode")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    return app
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
def register_core_blueprints(app):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Register core blueprints that are always available"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    core_blueprints = [
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui_build', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui_build_enhanced', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui_project_loader', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui_visual_builder', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('ui_guided', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    ]
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    for blueprint_name, url_prefix in core_blueprints:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            module = __import__(blueprint_name)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            blueprint = getattr(module, f'{blueprint_name}_bp', None)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            if blueprint:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                app.register_blueprint(blueprint, url_prefix=url_prefix)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                logger.info(f"✅ Registered core blueprint: {blueprint_name}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            else:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                logger.warning(f"⚠️ Core blueprint not found: {blueprint_name}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        except ImportError as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            logger.warning(f"⚠️ Failed to import core blueprint {blueprint_name}: {e}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        except Exception as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            logger.error(f"❌ Error registering core blueprint {blueprint_name}: {e}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
def register_optional_blueprints(app):
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Register optional blueprints with fault isolation"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    optional_blueprints = [
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('collab_workspace', '/collab'),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('background', None),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('memory', '/memory'),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('template_gen', '/templates'),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        ('client_success', '/client-success'),
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    ]
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    for blueprint_name, url_prefix in optional_blueprints:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        try:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            module = safe_import(blueprint_name)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            if module:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                blueprint = getattr(module, f'{blueprint_name}_bp', None)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                if blueprint:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    app.register_blueprint(blueprint, url_prefix=url_prefix)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    logger.info(f"✅ Registered optional blueprint: {blueprint_name}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                else:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                    logger.warning(f"⚠️ Optional blueprint not found: {blueprint_name}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            else:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
                logger.info(f"⏭️ Skipping optional blueprint: {blueprint_name} (not available)")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        except Exception as e:
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
            logger.error(f"❌ Error registering optional blueprint {blueprint_name}: {e}")
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
def get_optional_blueprint_status():
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    """Get status of optional blueprints"""
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    return {
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        'collab_workspace': collab_workspace is not None,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        'background': background is not None,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        'memory': memory is not None,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        'template_gen': template_gen is not None,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
        'client_success': client_success is not None,
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    }
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")

    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
if __name__ == '__main__':
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    app = create_app()
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
    app.run(host='127.0.0.1', port=5001, debug=True)
    # Register LLM blueprints explicitly
    try:
        from llm_config_api import llm_config_bp
        from llm_status_api import llm_status_bp
        from llm_dry_run_api import llm_dry_run_bp
        
        app.register_blueprint(llm_config_bp)
        app.register_blueprint(llm_status_bp)
        app.register_blueprint(llm_dry_run_bp)
        
        # Log registered LLM routes
        llm_routes = [rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith("/api/llm")]
        logger.info(f"✅ Registered LLM blueprints with routes: {llm_routes}")
        
    except ImportError as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to import LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprints required in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to import LLM blueprints in development: {e}")
    except Exception as e:
        if os.getenv("FLASK_ENV") in {"production", "staging"}:
            logger.error(f"❌ Failed to register LLM blueprints in production: {e}")
            raise SystemExit(f"LLM blueprint registration failed in production: {e}")
        else:
            logger.warning(f"⚠️ Failed to register LLM blueprints in development: {e}")
